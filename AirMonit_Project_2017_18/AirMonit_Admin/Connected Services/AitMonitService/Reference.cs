//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AirMonit_Admin.AitMonitService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InfoBetweenDate", Namespace="http://schemas.datacontract.org/2004/07/AirMonit_Service")]
    [System.SerializableAttribute()]
    public partial class InfoBetweenDate : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlarmLog", Namespace="http://schemas.datacontract.org/2004/07/AirMonit_Service")]
    [System.SerializableAttribute()]
    public partial class AlarmLog : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((this.DateTimeField.Equals(value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Parameter {
            get {
                return this.ParameterField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterField, value) != true)) {
                    this.ParameterField = value;
                    this.RaisePropertyChanged("Parameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UncommonEvents", Namespace="http://schemas.datacontract.org/2004/07/AirMonit_Service")]
    [System.SerializableAttribute()]
    public partial class UncommonEvents : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityName {
            get {
                return this.CityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CityNameField, value) != true)) {
                    this.CityNameField = value;
                    this.RaisePropertyChanged("CityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((this.DateTimeField.Equals(value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AitMonitService.IAirMonit_AccessingData")]
    public interface IAirMonit_AccessingData {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_AccessingData/getInfoMinEachHour", ReplyAction="http://tempuri.org/IAirMonit_AccessingData/getInfoMinEachHourResponse")]
        AirMonit_Admin.AitMonitService.InfoBetweenDate[] getInfoMinEachHour(string Parameter, string city, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_AccessingData/getInfoMinEachHour", ReplyAction="http://tempuri.org/IAirMonit_AccessingData/getInfoMinEachHourResponse")]
        System.Threading.Tasks.Task<AirMonit_Admin.AitMonitService.InfoBetweenDate[]> getInfoMinEachHourAsync(string Parameter, string city, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_AccessingData/getInfoMaxEachHour", ReplyAction="http://tempuri.org/IAirMonit_AccessingData/getInfoMaxEachHourResponse")]
        AirMonit_Admin.AitMonitService.InfoBetweenDate[] getInfoMaxEachHour(string Parameter, string city, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_AccessingData/getInfoMaxEachHour", ReplyAction="http://tempuri.org/IAirMonit_AccessingData/getInfoMaxEachHourResponse")]
        System.Threading.Tasks.Task<AirMonit_Admin.AitMonitService.InfoBetweenDate[]> getInfoMaxEachHourAsync(string Parameter, string city, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_AccessingData/getInfoAvgEachHour", ReplyAction="http://tempuri.org/IAirMonit_AccessingData/getInfoAvgEachHourResponse")]
        AirMonit_Admin.AitMonitService.InfoBetweenDate[] getInfoAvgEachHour(string Parameter, string city, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_AccessingData/getInfoAvgEachHour", ReplyAction="http://tempuri.org/IAirMonit_AccessingData/getInfoAvgEachHourResponse")]
        System.Threading.Tasks.Task<AirMonit_Admin.AitMonitService.InfoBetweenDate[]> getInfoAvgEachHourAsync(string Parameter, string city, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_AccessingData/getInfoMinBetweenDates", ReplyAction="http://tempuri.org/IAirMonit_AccessingData/getInfoMinBetweenDatesResponse")]
        AirMonit_Admin.AitMonitService.InfoBetweenDate[] getInfoMinBetweenDates(string Parameter, string city, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_AccessingData/getInfoMinBetweenDates", ReplyAction="http://tempuri.org/IAirMonit_AccessingData/getInfoMinBetweenDatesResponse")]
        System.Threading.Tasks.Task<AirMonit_Admin.AitMonitService.InfoBetweenDate[]> getInfoMinBetweenDatesAsync(string Parameter, string city, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_AccessingData/getInfoMaxBetweenDates", ReplyAction="http://tempuri.org/IAirMonit_AccessingData/getInfoMaxBetweenDatesResponse")]
        AirMonit_Admin.AitMonitService.InfoBetweenDate[] getInfoMaxBetweenDates(string Parameter, string city, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_AccessingData/getInfoMaxBetweenDates", ReplyAction="http://tempuri.org/IAirMonit_AccessingData/getInfoMaxBetweenDatesResponse")]
        System.Threading.Tasks.Task<AirMonit_Admin.AitMonitService.InfoBetweenDate[]> getInfoMaxBetweenDatesAsync(string Parameter, string city, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_AccessingData/getInfoAvgBetweenDates", ReplyAction="http://tempuri.org/IAirMonit_AccessingData/getInfoAvgBetweenDatesResponse")]
        AirMonit_Admin.AitMonitService.InfoBetweenDate[] getInfoAvgBetweenDates(string Parameter, string city, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_AccessingData/getInfoAvgBetweenDates", ReplyAction="http://tempuri.org/IAirMonit_AccessingData/getInfoAvgBetweenDatesResponse")]
        System.Threading.Tasks.Task<AirMonit_Admin.AitMonitService.InfoBetweenDate[]> getInfoAvgBetweenDatesAsync(string Parameter, string city, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_AccessingData/getDailyAlarmsByCity", ReplyAction="http://tempuri.org/IAirMonit_AccessingData/getDailyAlarmsByCityResponse")]
        AirMonit_Admin.AitMonitService.AlarmLog[] getDailyAlarmsByCity(string city, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_AccessingData/getDailyAlarmsByCity", ReplyAction="http://tempuri.org/IAirMonit_AccessingData/getDailyAlarmsByCityResponse")]
        System.Threading.Tasks.Task<AirMonit_Admin.AitMonitService.AlarmLog[]> getDailyAlarmsByCityAsync(string city, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_AccessingData/getDailyAlarmsByCityBetweenDates", ReplyAction="http://tempuri.org/IAirMonit_AccessingData/getDailyAlarmsByCityBetweenDatesRespon" +
            "se")]
        AirMonit_Admin.AitMonitService.AlarmLog[] getDailyAlarmsByCityBetweenDates(string city, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_AccessingData/getDailyAlarmsByCityBetweenDates", ReplyAction="http://tempuri.org/IAirMonit_AccessingData/getDailyAlarmsByCityBetweenDatesRespon" +
            "se")]
        System.Threading.Tasks.Task<AirMonit_Admin.AitMonitService.AlarmLog[]> getDailyAlarmsByCityBetweenDatesAsync(string city, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_AccessingData/getUncommonEvents", ReplyAction="http://tempuri.org/IAirMonit_AccessingData/getUncommonEventsResponse")]
        AirMonit_Admin.AitMonitService.UncommonEvents[] getUncommonEvents(string city, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_AccessingData/getUncommonEvents", ReplyAction="http://tempuri.org/IAirMonit_AccessingData/getUncommonEventsResponse")]
        System.Threading.Tasks.Task<AirMonit_Admin.AitMonitService.UncommonEvents[]> getUncommonEventsAsync(string city, System.DateTime dateTime);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAirMonit_AccessingDataChannel : AirMonit_Admin.AitMonitService.IAirMonit_AccessingData, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AirMonit_AccessingDataClient : System.ServiceModel.ClientBase<AirMonit_Admin.AitMonitService.IAirMonit_AccessingData>, AirMonit_Admin.AitMonitService.IAirMonit_AccessingData {
        
        public AirMonit_AccessingDataClient() {
        }
        
        public AirMonit_AccessingDataClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AirMonit_AccessingDataClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AirMonit_AccessingDataClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AirMonit_AccessingDataClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AirMonit_Admin.AitMonitService.InfoBetweenDate[] getInfoMinEachHour(string Parameter, string city, System.DateTime dateTime) {
            return base.Channel.getInfoMinEachHour(Parameter, city, dateTime);
        }
        
        public System.Threading.Tasks.Task<AirMonit_Admin.AitMonitService.InfoBetweenDate[]> getInfoMinEachHourAsync(string Parameter, string city, System.DateTime dateTime) {
            return base.Channel.getInfoMinEachHourAsync(Parameter, city, dateTime);
        }
        
        public AirMonit_Admin.AitMonitService.InfoBetweenDate[] getInfoMaxEachHour(string Parameter, string city, System.DateTime dateTime) {
            return base.Channel.getInfoMaxEachHour(Parameter, city, dateTime);
        }
        
        public System.Threading.Tasks.Task<AirMonit_Admin.AitMonitService.InfoBetweenDate[]> getInfoMaxEachHourAsync(string Parameter, string city, System.DateTime dateTime) {
            return base.Channel.getInfoMaxEachHourAsync(Parameter, city, dateTime);
        }
        
        public AirMonit_Admin.AitMonitService.InfoBetweenDate[] getInfoAvgEachHour(string Parameter, string city, System.DateTime dateTime) {
            return base.Channel.getInfoAvgEachHour(Parameter, city, dateTime);
        }
        
        public System.Threading.Tasks.Task<AirMonit_Admin.AitMonitService.InfoBetweenDate[]> getInfoAvgEachHourAsync(string Parameter, string city, System.DateTime dateTime) {
            return base.Channel.getInfoAvgEachHourAsync(Parameter, city, dateTime);
        }
        
        public AirMonit_Admin.AitMonitService.InfoBetweenDate[] getInfoMinBetweenDates(string Parameter, string city, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.getInfoMinBetweenDates(Parameter, city, startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<AirMonit_Admin.AitMonitService.InfoBetweenDate[]> getInfoMinBetweenDatesAsync(string Parameter, string city, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.getInfoMinBetweenDatesAsync(Parameter, city, startDate, endDate);
        }
        
        public AirMonit_Admin.AitMonitService.InfoBetweenDate[] getInfoMaxBetweenDates(string Parameter, string city, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.getInfoMaxBetweenDates(Parameter, city, startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<AirMonit_Admin.AitMonitService.InfoBetweenDate[]> getInfoMaxBetweenDatesAsync(string Parameter, string city, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.getInfoMaxBetweenDatesAsync(Parameter, city, startDate, endDate);
        }
        
        public AirMonit_Admin.AitMonitService.InfoBetweenDate[] getInfoAvgBetweenDates(string Parameter, string city, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.getInfoAvgBetweenDates(Parameter, city, startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<AirMonit_Admin.AitMonitService.InfoBetweenDate[]> getInfoAvgBetweenDatesAsync(string Parameter, string city, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.getInfoAvgBetweenDatesAsync(Parameter, city, startDate, endDate);
        }
        
        public AirMonit_Admin.AitMonitService.AlarmLog[] getDailyAlarmsByCity(string city, System.DateTime dateTime) {
            return base.Channel.getDailyAlarmsByCity(city, dateTime);
        }
        
        public System.Threading.Tasks.Task<AirMonit_Admin.AitMonitService.AlarmLog[]> getDailyAlarmsByCityAsync(string city, System.DateTime dateTime) {
            return base.Channel.getDailyAlarmsByCityAsync(city, dateTime);
        }
        
        public AirMonit_Admin.AitMonitService.AlarmLog[] getDailyAlarmsByCityBetweenDates(string city, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.getDailyAlarmsByCityBetweenDates(city, startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<AirMonit_Admin.AitMonitService.AlarmLog[]> getDailyAlarmsByCityBetweenDatesAsync(string city, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.getDailyAlarmsByCityBetweenDatesAsync(city, startDate, endDate);
        }
        
        public AirMonit_Admin.AitMonitService.UncommonEvents[] getUncommonEvents(string city, System.DateTime dateTime) {
            return base.Channel.getUncommonEvents(city, dateTime);
        }
        
        public System.Threading.Tasks.Task<AirMonit_Admin.AitMonitService.UncommonEvents[]> getUncommonEventsAsync(string city, System.DateTime dateTime) {
            return base.Channel.getUncommonEventsAsync(city, dateTime);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AitMonitService.IAirMonit_StoreData")]
    public interface IAirMonit_StoreData {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_StoreData/storeUncommonEvent", ReplyAction="http://tempuri.org/IAirMonit_StoreData/storeUncommonEventResponse")]
        int storeUncommonEvent(AirMonit_Admin.AitMonitService.UncommonEvents userInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirMonit_StoreData/storeUncommonEvent", ReplyAction="http://tempuri.org/IAirMonit_StoreData/storeUncommonEventResponse")]
        System.Threading.Tasks.Task<int> storeUncommonEventAsync(AirMonit_Admin.AitMonitService.UncommonEvents userInfo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAirMonit_StoreDataChannel : AirMonit_Admin.AitMonitService.IAirMonit_StoreData, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AirMonit_StoreDataClient : System.ServiceModel.ClientBase<AirMonit_Admin.AitMonitService.IAirMonit_StoreData>, AirMonit_Admin.AitMonitService.IAirMonit_StoreData {
        
        public AirMonit_StoreDataClient() {
        }
        
        public AirMonit_StoreDataClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AirMonit_StoreDataClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AirMonit_StoreDataClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AirMonit_StoreDataClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int storeUncommonEvent(AirMonit_Admin.AitMonitService.UncommonEvents userInfo) {
            return base.Channel.storeUncommonEvent(userInfo);
        }
        
        public System.Threading.Tasks.Task<int> storeUncommonEventAsync(AirMonit_Admin.AitMonitService.UncommonEvents userInfo) {
            return base.Channel.storeUncommonEventAsync(userInfo);
        }
    }
}
